// flat example
//Module Bookstore;
//Entity Bookstore.Book;
//
//ShortString Bookstore.Book.Code;
//AutoCode Bookstore.Book.Code;
//Required Bookstore.Book.Code;
//Unique Bookstore.Book.Code;
//
//ShortString Bookstore.Book.Title;
//Required Bookstore.Book.Title;
//
//Integer Bookstore.Book.NumberOfPages;
//ShortString Bookstore.Book.SomeProperty;
//
//Reference Bookstore.Book Author Bookstore.Person;
//
//ItemFilter Bookstore.Book.CommonMisspelling 'book => book.Title.Contains("curiousity")';
//InvalidData Bookstore.Book.CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';
//
//ItemFilter Bookstore.Book.LongBooks 'item => item.NumberOfPages >= 500';
//
//Logging Bookstore.Book;

// nested
Module Bookstore
{
	//CodeTable Codes;

	Entity Book
	{
	   //MonitoredRecord;

	   ShortString Code { AutoCode; Required; Unique; }
	   ShortString Title { Required; }
	   Integer NumberOfPages;
	   ShortString SomeProperty;

	   Reference Author Bookstore.Person;
	   Reference AssignedTo Bookstore.Employee; // Only the assigned person should be allowed to edit the book data.

	   ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
	   InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';

	   Logging;
	   ItemFilter LongBooks 'item => item.NumberOfPages >= 500';

	   ComposableFilterBy LongBooks3 '(query, repository, parameter) =>
            {
                var filtered = query.Where(item => item.NumberOfPages >= parameter.MinimumPages);
                if (parameter.ForeignBooksOnly == true)
                    filtered = filtered.Where(item => item.Extension_ForeignBook.ID != null);
                return filtered;
            }';

		FilterBy ComplexSearch '(repository, parameter) =>
        {
            var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
            if (parameter.ForeignBooksOnly == true)
                query = query.Where(item => item.Extension_ForeignBook.ID != null);
            Book[] books = query.ToSimple().ToArray();

            if (parameter.MaskTitles == true)
                foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title)))
                    book.Title = book.Title.First() + "***" + book.Title.Last();

            return books;
        }';

		RowPermissions
        {
            AllowRead EveryoneCanRead3 'context => book => true';

            AllowWrite OwnerCanWrite2 'context =>
            {
                return book => book.AssignedTo.UserName == context.UserInfo.UserName;
            }';
        }
	}

	Entity Review
    {
        Reference Book { Required; }
        Integer Score { Required; MinValue 1; MaxValue 5; }
        LongString Text;

        SaveMethod
        {
            Initialization DefaultTextFromScore
            '
                foreach (var item in insertedNew)
                    if (string.IsNullOrEmpty(item.Text) && item.Score != null)
                        item.Text = item.Score.Value >= 3
                            ? "I like it"
                            : "I don''t like it";
            ';

			LoadOldItems
			{
				Take Score;
				Take 'Book.Title';
			}

            OnSaveValidate DenyChangeOfLockedTitle
            '
                var itemsWithModifiedScore = updatedOld
                    .Zip(updatedNew, (oldValue, newValue) => new { oldValue, newValue })
                    .Where(modified => modified.oldValue.Score == null && modified.newValue.Score != null
                        || modified.oldValue.Score != null && !modified.oldValue.Score.Equals(modified.newValue.Score))
                    .Where(modified => modified.oldValue.BookTitle.IndexOf("lock", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    .FirstOrDefault();

                if (itemsWithModifiedScore != null)
                    throw new Rhetos.UserException(string.Format(
                        "It is not allowed to modify score ({0} => {1}) for the book \"{2}\" because to contains \"lock\" in the title.",
                        itemsWithModifiedScore.oldValue.Score,
                        itemsWithModifiedScore.newValue.Score,
                        itemsWithModifiedScore.oldValue.BookTitle));
            ';
        }
    }

	Parameter LongBooks3
	{
		Integer MinimumPages;
		Bool ForeignBooksOnly;
	}

	Parameter ComplexSearch
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
    }

	Entity Person
	{
		ShortString Name;
	}

	SqlProcedure ComputePersonInfo
        "@NamePattern NVARCHAR(256), @LimitResultCount INT"
        "
            SELECT TOP (@LimitResultCount)
                p.ID, Name, NameLength = LEN(p.Name), PersonID = p.ID
            FROM
                Demo.Person p
            WHERE
                p.Name LIKE '%' + @NamePattern + '%'
            ORDER BY
                p.Name
        ";

	Parameter PersonFilter
    {
        ShortString NamePattern;
        Integer LimitResultCount;
    }

	Computed PersonInfo 'repository => { throw new Rhetos.UserException("Use filter \"Bookstore.PersonFilter\" to read the data."); }'
    {
        ShortString Name;
        Integer NameLength;
        Guid PersonID;

        FilterBy PersonFilter
            '(repository, parameter) =>
            {
                // Always separate parameters to prevent SQL injection.
                string sql = "EXEC Bookstore.ComputePersonInfo @p0, @p1";
                var sqlParams = new object[] { parameter.NamePattern, parameter.LimitResultCount };

                var result = _executionContext.EntityFrameworkContext.Database
                    .SqlQuery<Bookstore.PersonInfo>(sql, sqlParams)
                    .ToArray();
                return result;
            }';
    }

	Entity Comment
	{
		Reference Book { Detail; }
		LongString Text;

		DateTime Created { CreationTime; }
        DateTime Modified { ModificationTimeOf Bookstore.Comment.Text; }

		RowPermissions
		{
			InheritFrom Bookstore.Comment.Book;
		}
	}

	Entity ChildrensBook
	{
		Extends Bookstore.Book;

		Integer AgeFrom;
		Integer AgeTo;
		IntegerRange AgeFrom AgeTo;
	}

	Entity ForeignBook
	{
		Extends Bookstore.Book;

		ShortString OriginalLanguage { DefaultValue 'item => "en"'; }
		Reference Translator Bookstore.Person;
	}

	Entity Topic
	{
		ShortString Name { Unique; Required; }
	}

	Entity BookTopic
	{
		Reference Book { Detail; }
		Reference Topic { Required; }

		UniqueMultiple 'Book Topic';
	}

	Entity Department
	{
		ShortString Code { Unique; DenyUserEdit; }
		LongString Description;
	}	

	Browse BookGrid Bookstore.Book
	{
		Take Code;
		Take Title;
		Take 'Author.Name';
		Take TranslatorName 'Extension_ForeignBook.Translator.Name';
		Take NumberOfComments 'Extension_BookInfo.NumberOfComments';
	}

	Browse BookTopicsGrid Bookstore.Book
	{
		Take BookName Title;
		Take AuthorName 'Author.Name';
		Take NumberOfTopics 'Extension_BookTopics.NumberOfTopics';
	}

	SqlQueryable BookInfo <SQL\BookInfo.sql>		
	{
		Extends Bookstore.Book;
		Integer NumberOfComments;

		AutodetectSqlDependencies;
	}

	SqlQueryable BookTopics <SQL\BookTopics.sql>		
	{
		Extends Bookstore.Book;
		Integer NumberOfTopics;

		AutodetectSqlDependencies;
	}

	SqlView ActiveEmployees <SQL\ActiveEmployees.sql>;

	Entity Disposal
    {
        Reference Book { Required; }
        LongString Explanation { Required; }
        DateTime EffectiveSince { CreationTime; }
    }

	Entity Disposal
	{
		Reference Book { Required; }
		LongString Explanation { Required; }
		DateTime EffectiveSince { CreationTime; }

		ItemFilter ImportantBookExplanation 'item => item.Book.Title.Contains("important") && item.Explanation.Length < 50';
		InvalidData ImportantBookExplanation 'When disposing an important book, the explanation should be at least 50 characters long.';

		ItemFilter HighRating 'item => item.Book.Extension_ExpectedBookRating.Rating > 100';
		InvalidData HighRating 'You are not allowed to dispose a book with rating above 100.';

		ItemFilter ExplanationTooLong 'item => item.Explanation.Length > 500';
		InvalidData ExplanationTooLong 'The {0} cannot be longer then {1} characters.'
		{
			MessageParametersConstant '"Explanation", 500';
		}

		ItemFilter ExplanationSpecialCharacters 'item => item.Explanation.Contains("#") || item.Explanation.Contains("$")';
		InvalidData ExplanationSpecialCharacters 'The explanation should not contain special characters.'
		{
			// Full control over validation's error message and metadata:
			MessageFunction 'ids => this.Query(ids)
				.Select(item => new { item.ID, BookTitle = item.Book.Title })
				.ToList()
				.Select(item => new InvalidDataMessage
				{
					ID = item.ID,
					Message = "The explanation for \"{0}\" contains character \"#\" or \"$\".",
					MessageParameters = new object[] { item.BookTitle },
					Metadata = metadata
				})';
		}
	}

	Computed ExpectedBookRating 'repository =>
        {
            var books = repository.Bookstore.Book.Query()
                .Select(b =>
                    new
                    {
                        b.ID,
                        b.Title,
                        IsForeign = b.Extension_ForeignBook.ID != null
                    })
                .ToList();

            var ratings = new List<ExpectedBookRating>();
            foreach (var book in books)
            {
                decimal rating = 0;

                if (book.Title?.IndexOf("super", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 100;

                if (book.Title?.IndexOf("great", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 50;

                if (book.IsForeign)
                    rating *= 1.2m;

                ratings.Add(new ExpectedBookRating { ID = book.ID, Rating = rating });
            }

            return ratings.ToArray();
        }'
    {
        Extends Bookstore.Book;
        Decimal Rating;
    }

	Action InsertManyBooks
        '(parameter, repository, userInfo) =>
        {
            for (int i = 0; i < parameter.NumberOfBooks; i++)
            {
				string newTitle = parameter.TitlePrefix + " - " + (i + 1);
                var newBook = new Bookstore.Book { Code = "+++", Title = newTitle };
                repository.Bookstore.Book.Insert(newBook);
            }
        }'
	{
		Integer NumberOfBooks;
		ShortString TitlePrefix;
	}

    Parameter DemoFilter
    {
        ShortString Prefix;
    }
}


//Module Bookstore
//{
//   Entity Book
//   {
//      ShortString Code { AutoCode; }
//      ShortString Title;
//      Integer NumberOfPages;
//      ShortString SomeProperty;
//
//      ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
//      InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';
//
//      Logging;
//   }
//}

// flat example
Module Bookstore;
Entity Bookstore.Book;

ShortString Bookstore.Book.Code;
AutoCode Bookstore.Book.Code;
Required Bookstore.Book.Code;
Unique Bookstore.Book.Code;

ShortString Bookstore.Book.Title;
Required Bookstore.Book.Title;

Integer Bookstore.Book.NumberOfPages;
ShortString Bookstore.Book.SomeProperty;

ItemFilter Bookstore.Book.CommonMisspelling 'book => book.Title.Contains("curiousity")';
InvalidData Bookstore.Book.CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';

Logging Bookstore.Book;
Reference Bookstore.Book Author Bookstore.Person;

// nested
Module Bookstore
{
	Entity Person
	{
		ShortString Name;
	}

	Entity Comment
	{
		Reference Book { Detail; }
		LongString Text;

		DateTime Created { CreationTime; }
        DateTime Modified { ModificationTimeOf Bookstore.Comment.Text; }
	}

	Entity ChildrensBook
	{
		Extends Bookstore.Book;

		Integer AgeFrom;
		Integer AgeTo;
		IntegerRange AgeFrom AgeTo;
	}

	Entity ForeignBook
	{
		Extends Bookstore.Book;

		ShortString OriginalLanguage { DefaultValue 'item => "en"'; }
		Reference Translator Bookstore.Person;
	}

	Entity Topic
	{
		ShortString Name { Unique; Required; }
	}

	Entity BookTopic
	{
		Reference Book { Detail; }
		Reference Topic { Required; }

		UniqueMultiple 'Book Topic';
	}

	Entity Department
	{
		ShortString Code { Unique; DenyUserEdit; }
		LongString Description;
	}	

	Browse BookGrid Bookstore.Book
	{
		Take Code;
		Take Title;
		Take 'Author.Name';
		Take TranslatorName 'Extension_ForeignBook.Translator.Name';
		Take NumberOfComments 'Extension_BookInfo.NumberOfComments';
	}

	Browse BookTopicsGrid Bookstore.Book
	{
		Take BookName Title;
		Take AuthorName 'Author.Name';
		Take NumberOfTopics 'Extension_BookTopics.NumberOfTopics';
	}

	SqlQueryable BookInfo <SQL\BookInfo.sql>		
	{
		Extends Bookstore.Book;
		Integer NumberOfComments;

		AutodetectSqlDependencies;
	}

	SqlQueryable BookTopics <SQL\BookTopics.sql>		
	{
		Extends Bookstore.Book;
		Integer NumberOfTopics;

		AutodetectSqlDependencies;
	}

	Computed ExpectedBookRating 'repository =>
        {
            var books = repository.Bookstore.Book.Query()
                .Select(b =>
                    new
                    {
                        b.ID,
                        b.Title,
                        IsForeign = b.Extension_ForeignBook.ID != null
                    })
                .ToList();

            var ratings = new List<ExpectedBookRating>();
            foreach (var book in books)
            {
                decimal rating = 0;

                if (book.Title?.IndexOf("super", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 100;

                if (book.Title?.IndexOf("great", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 50;

                if (book.IsForeign)
                    rating *= 1.2m;

                ratings.Add(new ExpectedBookRating { ID = book.ID, Rating = rating });
            }

            return ratings.ToArray();
        }'
    {
        Extends Bookstore.Book;
        Decimal Rating;
    }

	Action InsertManyBooks
        '(parameter, repository, userInfo) =>
        {
            for (int i = 0; i < parameter.NumberOfBooks; i++)
            {
				string newTitle = parameter.TitlePrefix + " - " + (i + 1);
                var newBook = new Bookstore.Book { Code = "+++", Title = newTitle };
                repository.Bookstore.Book.Insert(newBook);
            }
        }'
	{
		Integer NumberOfBooks;
		ShortString TitlePrefix;
	}

    Parameter DemoFilter
    {
        ShortString Prefix;
    }
}

